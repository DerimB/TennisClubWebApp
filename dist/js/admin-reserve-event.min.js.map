{"version":3,"file":"admin-reserve-event.min.js","sources":["admin-reserve-event.js"],"sourcesContent":["// Function to generate time options\r\nasync function populateTimeOptions(selectElementId) {\r\n  const selectElement = document.getElementById(selectElementId);\r\n  if (!selectElement) {\r\n    console.error(`Element with id \"${selectElementId}\" not found.`);\r\n    return;\r\n  }\r\n\r\n  // Clear existing options\r\n  selectElement.innerHTML = \"\";\r\n  console.log(`Cleared existing options for ${selectElementId}`);\r\n\r\n  // Add the initial placeholder option\r\n  const placeholderOption = document.createElement(\"option\");\r\n  placeholderOption.value = \"\";\r\n  placeholderOption.textContent = \"Please select time\";\r\n  placeholderOption.disabled = true; // Make it unselectable\r\n  placeholderOption.selected = true; // Set it as the default selected option\r\n  selectElement.appendChild(placeholderOption);\r\n  console.log(\"Added placeholder option\");\r\n\r\n  const startTime = 6; // Start time in hours (6:00 AM)\r\n  const endTime = 20; // End time in hours (8:30 PM)\r\n\r\n  // Fetch existing reservations\r\n  const date = document.getElementById(\"date\").value;\r\n  document.getElementById(\"date\").addEventListener(\"change\", function () {\r\n    const selectedDate = this.value; // Get the selected date\r\n    const dateDisplay = document.getElementById(\"display-date\"); // Select the display-date element\r\n    dateDisplay.textContent = selectedDate; // Update the text content with the selected date\r\n  });\r\n  let reservations = [];\r\n  if (date) {\r\n    try {\r\n      console.log(`Fetching reservations for date: ${date}`);\r\n      const response = await fetch(\"http://localhost:5000/api/reservations\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        reservations = await response.json();\r\n        console.log(\"Fetched reservations:\", reservations);\r\n      } else {\r\n        console.error(\"Failed to fetch reservations:\", await response.text());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching reservations:\", error);\r\n    }\r\n  } else {\r\n    console.log(\"No date selected, skipping reservation fetch\");\r\n  }\r\n\r\n  // Filter out unavailable times\r\n  for (let hour = startTime; hour <= endTime; hour++) {\r\n    for (let minutes = hour === startTime ? 30 : 0; minutes < 60; minutes += 30) {\r\n      // Stop at 2:30 PM\r\n      if (hour === 14 && minutes > 30) break;\r\n\r\n      // Format time as HH:MM\r\n      const time = `${hour.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}`;\r\n      console.log(`Checking availability for time: ${time}`);\r\n\r\n      // Check if the time is available\r\n      const isAvailable = !reservations.some(reservation => {\r\n        const reservationStart = reservation.start_time;\r\n        const reservationEnd = reservation.end_time;\r\n\r\n        // Rule: Remove the start-time option if it overlaps with any reservation on the same day\r\n        if (reservation.date === date) {\r\n          if (\r\n            (time >= reservationStart && time < reservationEnd) || // Overlaps with an existing reservation\r\n            (parseTimeToMinutes(time) < parseTimeToMinutes(reservationEnd) + 30 && // Within 30 minutes after reservation end time\r\n             parseTimeToMinutes(time) >= parseTimeToMinutes(reservationEnd))\r\n          ) {\r\n            console.log(`Removing start-time option: ${time} because it overlaps with an existing reservation or is within 30 minutes after.`);\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      });\r\n\r\n      console.log(`Time: ${time}, Available: ${isAvailable}`);\r\n\r\n      if (isAvailable) {\r\n        // Convert to 12-hour format with AM/PM\r\n        const period = hour < 12 ? \"AM\" : \"PM\";\r\n        const displayHour = hour % 12 === 0 ? 12 : hour % 12;\r\n        const displayTime = `${displayHour}:${minutes.toString().padStart(2, \"0\")} ${period}`;\r\n\r\n        // Create and append the option element\r\n        const option = document.createElement(\"option\");\r\n        option.value = time;\r\n        option.textContent = displayTime;\r\n        selectElement.appendChild(option);\r\n        console.log(`Added time option: ${displayTime}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ndocument.getElementById(\"date\").addEventListener(\"change\", () => {\r\n  populateTimeOptions(\"start-time\"); // Update the start-time options based on the selected date\r\n});\r\n\r\n\r\n// Function to populate end-time options based on selected start-time\r\nasync function updateEndTimeOptions() {\r\n  console.log(\"updateEndTimeOptions called\");\r\n\r\n  const startTimeSelect = document.getElementById(\"start-time\");\r\n  const endTimeSelect = document.getElementById(\"end-time\");\r\n\r\n  // Clear existing options in the end-time select\r\n  endTimeSelect.innerHTML = \"\";\r\n  console.log(\"Cleared existing end-time options\");\r\n\r\n  // Add the initial placeholder option\r\n  const placeholderOption = document.createElement(\"option\");\r\n  placeholderOption.value = \"\";\r\n  placeholderOption.textContent = \"Please select time\";\r\n  placeholderOption.disabled = true; // Make it unselectable\r\n  placeholderOption.selected = true; // Set it as the default selected option\r\n  endTimeSelect.appendChild(placeholderOption);\r\n  console.log(\"Added placeholder option to end-time dropdown\");\r\n\r\n  // Get the selected start time\r\n  const selectedStartTime = startTimeSelect.value;\r\n  if (!selectedStartTime) {\r\n    console.log(\"No start time selected, exiting function\");\r\n    return;\r\n  }\r\n  console.log(`Selected start time: ${selectedStartTime}`);\r\n\r\n  // Parse the selected start time into hours and minutes\r\n  const [startHour, startMinutes] = selectedStartTime.split(\":\").map(Number);\r\n  console.log(`Parsed start time: ${startHour} hour(s), ${startMinutes} minute(s)`);\r\n\r\n  // Define the closing time (e.g., 8:30 PM)\r\n  const closingHour = 20; // 8:00 PM\r\n  const closingMinutes = 30;\r\n\r\n  // Generate end-time options starting 30 minutes after the selected start time\r\n  let currentHour = startHour;\r\n  let currentMinutes = startMinutes + 30;\r\n\r\n  while (currentHour < closingHour || (currentHour === closingHour && currentMinutes <= closingMinutes)) {\r\n    // Adjust the hour and minutes if minutes exceed 59\r\n    if (currentMinutes >= 60) {\r\n      currentHour += 1;\r\n      currentMinutes -= 60;\r\n    }\r\n\r\n    // Format time as HH:MM\r\n    const time = `${currentHour.toString().padStart(2, \"0\")}:${currentMinutes.toString().padStart(2, \"0\")}`;\r\n    console.log(`Generated end-time option: ${time}`);\r\n\r\n    // Convert to 12-hour format with AM/PM\r\n    const period = currentHour < 12 ? \"AM\" : \"PM\";\r\n    const displayHour = currentHour % 12 === 0 ? 12 : currentHour % 12;\r\n    const displayTime = `${displayHour}:${currentMinutes.toString().padStart(2, \"0\")} ${period}`;\r\n\r\n    // Create and append the option element\r\n    const option = document.createElement(\"option\");\r\n    option.value = time;\r\n    option.textContent = displayTime;\r\n    endTimeSelect.appendChild(option);\r\n\r\n    // Increment by 30 minutes for the next option\r\n    currentMinutes += 30;\r\n  }\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  populateTimeOptions(\"start-time\"); // Populate the start time select\r\n  populateTimeOptions(\"end-time\");   // Populate the end time select (initially)\r\n\r\n  // Add event listener to update end-time options when start-time changes\r\n  document.getElementById(\"start-time\").addEventListener(\"change\", updateEndTimeOptions);\r\n});\r\n\r\n// Call the function when the submit button is clicked\r\ndocument.getElementById(\"submit-reservation\").addEventListener(\"click\", async function (event) {\r\n  event.preventDefault(); // Prevent the form from submitting\r\n\r\n  try {\r\n    // Get the user ID from localStorage\r\n    const userId = localStorage.getItem(\"user_id\");\r\n    if (!userId) {\r\n      alert(\"User not logged in. Please log in first.\");\r\n      return;\r\n    }\r\n\r\n    // Get the selected date\r\n    const date = document.getElementById(\"date\").value;\r\n    if (!date) {\r\n      alert(\"Please select a date.\");\r\n      return;\r\n    }\r\n\r\n    // Get the selected start and end times\r\n    const startTime = document.getElementById(\"start-time\").value;\r\n    const endTime = document.getElementById(\"end-time\").value;\r\n\r\n    if (!startTime || !endTime) {\r\n      alert(\"Please fill in all required fields.\");\r\n      return;\r\n    }\r\n\r\n    // Prepare reservation data for all courts (1 to 12)\r\n    const reservations = [];\r\n    for (let courtId = 1; courtId <= 12; courtId++) {\r\n      reservations.push({\r\n        user_id: parseInt(userId),\r\n        court_id: courtId,\r\n        date,\r\n        start_time: startTime,\r\n        end_time: endTime,\r\n        game_type: \"event\",\r\n        guest_count_used: 0, // No guests for this reservation\r\n        players: [],\r\n      });\r\n    }\r\n\r\n    // Send all reservation requests to the backend\r\n    const reservationPromises = reservations.map((reservationData) =>\r\n      fetch(\"http://localhost:5000/api/reservations\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(reservationData),\r\n      })\r\n    );\r\n\r\n    // Wait for all reservation requests to complete\r\n    const responses = await Promise.all(reservationPromises);\r\n\r\n    // Check the results of all requests\r\n    let allSuccessful = true;\r\n    for (const response of responses) {\r\n      if (!response.ok) {\r\n        allSuccessful = false;\r\n        const result = await response.json();\r\n        console.error(\"Failed to create reservation:\", result.error);\r\n      }\r\n    }\r\n\r\n    if (allSuccessful) {\r\n      alert(\"All courts successfully reserved!\");\r\n    } else {\r\n      alert(\"Some reservations failed. Please check the console for details.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error creating reservations:\", error);\r\n    alert(\"An error occurred while creating the reservations.\");\r\n  }\r\n});\r\n"],"names":["async","populateTimeOptions","selectElementId","selectElement","document","getElementById","innerHTML","console","log","placeholderOption","createElement","value","textContent","disabled","selected","appendChild","date","reservations","addEventListener","selectedDate","this","response","await","fetch","method","headers","Content-Type","ok","json","error","text","let","hour","minutes","time","toString","padStart","option","isAvailable","some","reservation","reservationStart","start_time","reservationEnd","end_time","parseTimeToMinutes","period","displayTime","updateEndTimeOptions","startTimeSelect","endTimeSelect","selectedStartTime","startHour","startMinutes","split","map","Number","currentHour","currentMinutes","event","preventDefault","userId","localStorage","getItem","startTime","endTime","courtId","push","user_id","parseInt","court_id","game_type","guest_count_used","players","result","reservationPromises","body","JSON","stringify","reservationData","responses","Promise","all","allSuccessful","alert"],"mappings":"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"}