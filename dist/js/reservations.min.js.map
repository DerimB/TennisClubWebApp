{"version":3,"file":"reservations.min.js","sources":["reservations.js"],"sourcesContent":["// Function to fetch and display the user's guest count\r\nasync function loadGuestCount() {\r\n  try {\r\n    const userId = localStorage.getItem(\"user_id\"); // Get the current user's ID\r\n    if (!userId) {\r\n      console.error(\"User not logged in.\");\r\n      return;\r\n    }\r\n\r\n    const response = await fetch(`http://localhost:5000/api/users/${userId}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const userData = await response.json();\r\n      const guestCount = userData.guest_count; // Get the guest count from the response\r\n      console.log(`Guest Count for User ${userId}:`, guestCount);\r\n\r\n      // Update the guest count display\r\n      const guestCountElement = document.querySelector(\".guest-count-number\");\r\n      guestCountElement.textContent = guestCount;\r\n    } else {\r\n      console.error(\"Failed to fetch user data:\", await response.text());\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching user data:\", error);\r\n  }\r\n}\r\n\r\nfunction refreshUpcomingReservationsDisplay() {\r\n  const container = document.querySelector(\".display-upcoming-reservations\");\r\n  container.innerHTML = `\r\n    <div class=\"upcoming-reservations-title\">Upcoming Reservations</div>\r\n  `;\r\n  loadUpcomingReservations();\r\n}\r\n\r\n// Function to generate time options\r\nasync function populateTimeOptions(selectElementId) {\r\n  const selectElement = document.getElementById(selectElementId);\r\n  if (!selectElement) {\r\n    console.error(`Element with id \"${selectElementId}\" not found.`);\r\n    return;\r\n  }\r\n\r\n  // Clear existing options\r\n  selectElement.innerHTML = \"\";\r\n  console.log(`Cleared existing options for ${selectElementId}`);\r\n\r\n  // Add the initial placeholder option\r\n  const placeholderOption = document.createElement(\"option\");\r\n  placeholderOption.value = \"\";\r\n  placeholderOption.textContent = \"Please select time\";\r\n  placeholderOption.disabled = true; // Make it unselectable\r\n  placeholderOption.selected = true; // Set it as the default selected option\r\n  selectElement.appendChild(placeholderOption);\r\n  console.log(\"Added placeholder option\");\r\n\r\n  const startTime = 6; // Start time in hours (6:00 AM)\r\n  const endTime = 20; // End time in hours (8:30 PM)\r\n\r\n  // Fetch existing reservations\r\n  const date = document.getElementById(\"date\").value;\r\n  document.getElementById(\"date\").addEventListener(\"change\", function () {\r\n    const selectedDate = this.value; // Get the selected date\r\n    const dateDisplay = document.getElementById(\"display-date\"); // Select the display-date element\r\n    dateDisplay.textContent = selectedDate; // Update the text content with the selected date\r\n  });\r\n  let reservations = [];\r\n  if (date) {\r\n    try {\r\n      console.log(`Fetching reservations for date: ${date}`);\r\n      const response = await fetch(\"http://localhost:5000/api/reservations\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const reservations = await response.json();\r\n        console.log(\"Fetched reservations:\", reservations);\r\n      } else {\r\n        console.error(\"Failed to fetch reservations:\", await response.text());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching reservations:\", error);\r\n    }\r\n  } else {\r\n    console.log(\"No date selected, skipping reservation fetch\");\r\n  }\r\n\r\n  // Filter out unavailable times\r\n  for (let hour = startTime; hour <= endTime; hour++) {\r\n    for (let minutes = hour === startTime ? 30 : 0; minutes < 60; minutes += 30) {\r\n      // Stop at 2:30 PM\r\n      if (hour === 14 && minutes > 30) break;\r\n\r\n      // Format time as HH:MM\r\n      const time = `${hour.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}`;\r\n      console.log(`Checking availability for time: ${time}`);\r\n\r\n      // Check if the time is available\r\n      const isAvailable = !reservations.some(reservation => {\r\n        const reservationStart = reservation.start_time;\r\n        const reservationEnd = reservation.end_time;\r\n\r\n        // Rule: Remove the start-time option if it overlaps with any reservation on the same day\r\n        if (reservation.date === date) {\r\n          if (\r\n            (time >= reservationStart && time < reservationEnd) || // Overlaps with an existing reservation\r\n            (parseTimeToMinutes(time) < parseTimeToMinutes(reservationEnd) + 30 && // Within 30 minutes after reservation end time\r\n             parseTimeToMinutes(time) >= parseTimeToMinutes(reservationEnd))\r\n          ) {\r\n            console.log(`Removing start-time option: ${time} because it overlaps with an existing reservation or is within 30 minutes after.`);\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      });\r\n\r\n      console.log(`Time: ${time}, Available: ${isAvailable}`);\r\n\r\n      if (isAvailable) {\r\n        // Convert to 12-hour format with AM/PM\r\n        const period = hour < 12 ? \"AM\" : \"PM\";\r\n        const displayHour = hour % 12 === 0 ? 12 : hour % 12;\r\n        const displayTime = `${displayHour}:${minutes.toString().padStart(2, \"0\")} ${period}`;\r\n\r\n        // Create and append the option element\r\n        const option = document.createElement(\"option\");\r\n        option.value = time;\r\n        option.textContent = displayTime;\r\n        selectElement.appendChild(option);\r\n        console.log(`Added time option: ${displayTime}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Helper function to parse time (HH:MM) to minutes\r\nfunction parseTimeToMinutes(time) {\r\n  const [hour, minutes] = time.split(\":\").map(Number);\r\n  return hour * 60 + minutes;\r\n}\r\n\r\n// Function to populate end-time options based on selected start-time\r\nasync function updateEndTimeOptions() {\r\n  console.log(\"updateEndTimeOptions called\");\r\n\r\n  const startTimeSelect = document.getElementById(\"start-time\");\r\n  const endTimeSelect = document.getElementById(\"end-time\");\r\n\r\n  // Clear existing options in the end-time select\r\n  endTimeSelect.innerHTML = \"\";\r\n  console.log(\"Cleared existing end-time options\");\r\n\r\n  // Add the initial placeholder option\r\n  const placeholderOption = document.createElement(\"option\");\r\n  placeholderOption.value = \"\";\r\n  placeholderOption.textContent = \"Please select time\";\r\n  placeholderOption.disabled = true; // Make it unselectable\r\n  placeholderOption.selected = true; // Set it as the default selected option\r\n  endTimeSelect.appendChild(placeholderOption);\r\n  console.log(\"Added placeholder option to end-time dropdown\");\r\n\r\n  // Get the selected start time\r\n  const selectedStartTime = startTimeSelect.value;\r\n  if (!selectedStartTime) {\r\n    console.log(\"No start time selected, exiting function\");\r\n    return;\r\n  }\r\n  console.log(`Selected start time: ${selectedStartTime}`);\r\n\r\n  // Parse the selected start time into hours and minutes\r\n  const [startHour, startMinutes] = selectedStartTime.split(\":\").map(Number);\r\n  console.log(`Parsed start time: ${startHour} hour(s), ${startMinutes} minute(s)`);\r\n\r\n  // Fetch existing reservations\r\n  const date = document.getElementById(\"date\").value;\r\n  let reservations = [];\r\n  if (date) {\r\n    try {\r\n      console.log(`Fetching reservations for date: ${date}`);\r\n      const response = await fetch(\"http://localhost:5000/api/reservations\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        reservations = await response.json();\r\n        console.log(\"Fetched reservations:\", reservations);\r\n      } else {\r\n        console.error(\"Failed to fetch reservations:\", await response.text());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching reservations:\", error);\r\n    }\r\n  } else {\r\n    console.log(\"Date not selected, skipping reservation fetch\");\r\n  }\r\n\r\n  // Check if there is a reservation 1 hour and 30 minutes before the selected start time across all courts\r\n  let isOneAndHalfHoursBeforeReserved = false;\r\n\r\n  reservations.forEach(reservation => {\r\n    if (reservation.date === date) { // Check across all courts\r\n      const reservationStartMinutes = parseTimeToMinutes(reservation.start_time);\r\n      const selectedStartMinutes = parseTimeToMinutes(selectedStartTime);\r\n      const timeDifference = selectedStartMinutes - reservationStartMinutes;\r\n\r\n      console.log(`Reservation Start Time (minutes): ${reservationStartMinutes}`);\r\n      console.log(`Selected Start Time (minutes): ${selectedStartMinutes}`);\r\n      console.log(`Time Difference: ${timeDifference}`);\r\n\r\n      if (timeDifference === 90) { // 1 hour and 30 minutes before\r\n        console.log(`Reservation found 1 hour and 30 minutes before: ${reservation.start_time}`);\r\n        isOneAndHalfHoursBeforeReserved = true;\r\n      }\r\n    }\r\n  });\r\n\r\n  console.log(`Is 1 hour and 30 minutes before reserved: ${isOneAndHalfHoursBeforeReserved}`);\r\n\r\n  // Generate end-time options\r\n  const endTimes = [];\r\n  if (isOneAndHalfHoursBeforeReserved) {\r\n    console.log(\"Reservation 1 hour and 30 minutes before detected, restricting end-time to 1.5 hours after start time\");\r\n    // If there is a reservation 1 hour and 30 minutes before, only allow 1.5 hours after the start time\r\n    endTimes.push({\r\n      hour: startHour + Math.floor((startMinutes + 90) / 60),\r\n      minutes: (startMinutes + 90) % 60,\r\n    });\r\n  } else {\r\n    console.log(\"No restrictions, adding 1.5 hours and 2 hours after start time\");\r\n    // Add 1.5 hours after the start time\r\n    const oneAndHalfHoursLater = {\r\n      hour: startHour + Math.floor((startMinutes + 90) / 60),\r\n      minutes: (startMinutes + 90) % 60,\r\n    };\r\n\r\n    // Add 2 hours after the start time\r\n    const twoHoursLater = {\r\n      hour: startHour + Math.floor((startMinutes + 120) / 60),\r\n      minutes: (startMinutes + 120) % 60,\r\n    };\r\n\r\n    endTimes.push(oneAndHalfHoursLater, twoHoursLater);\r\n  }\r\n\r\n  console.log(\"Generated end-time options:\", endTimes);\r\n\r\n  // Add the generated end times to the dropdown\r\n  for (const endTime of endTimes) {\r\n    // Format time as HH:MM\r\n    const time = `${endTime.hour.toString().padStart(2, \"0\")}:${endTime.minutes.toString().padStart(2, \"0\")}`;\r\n    // Convert to 12-hour format with AM/PM\r\n    const period = endTime.hour < 12 ? \"AM\" : \"PM\";\r\n    const displayHour = endTime.hour % 12 === 0 ? 12 : endTime.hour % 12;\r\n    const displayTime = `${displayHour}:${endTime.minutes.toString().padStart(2, \"0\")} ${period}`;\r\n\r\n    console.log(`Adding end-time option: ${displayTime}`);\r\n    // Create and append the option element\r\n    const option = document.createElement(\"option\");\r\n    option.value = time;\r\n    option.textContent = displayTime;\r\n    endTimeSelect.appendChild(option);\r\n  }\r\n}\r\n\r\n// Function to fetch and log all reservations\r\nasync function logAllReservations() {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/reservations\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n\r\n    if (response.ok) {\r\n      const reservations = await response.json();\r\n      console.log(\"All Reservations:\", reservations);\r\n    } else {\r\n      console.error(\"Failed to fetch reservations:\", await response.text());\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching reservations:\", error);\r\n  }\r\n}\r\n\r\n// Function to fetch reservations and highlight taken time slots for the selected date and court range\r\nasync function highlightReservationsForSelectedDate(courtRangeStart, courtRangeEnd) {\r\n  try {\r\n    const selectedDate = document.getElementById(\"date\").value; // Get the selected date\r\n    if (!selectedDate) {\r\n      console.log(\"No date selected, skipping reservation highlighting.\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Selected Date:\", selectedDate);\r\n\r\n    const response = await fetch(\"http://localhost:5000/api/reservations\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const reservations = await response.json();\r\n      console.log(\"Fetched Reservations:\", reservations);\r\n\r\n      // Reset all time slots to their default background\r\n      const timeSlots = document.querySelectorAll(\".display-reservations-time\");\r\n      timeSlots.forEach((slot) => {\r\n        slot.style.backgroundColor = \"\"; // Reset background color\r\n      });\r\n\r\n      // Highlight time slots for the selected date and court range\r\n      reservations.forEach((reservation) => {\r\n        if (\r\n          reservation.date === selectedDate &&\r\n          reservation.court_id >= courtRangeStart &&\r\n          reservation.court_id <= courtRangeEnd\r\n        ) {\r\n          console.log(\r\n            `Processing reservation for court_id: ${reservation.court_id}, start_time: ${reservation.start_time}, end_time: ${reservation.end_time}`\r\n          );\r\n\r\n          // Map courts 5–8 to 1–4 for display purposes\r\n          let mappedCourtId = reservation.court_id;\r\n          if (reservation.court_id >= 5 && reservation.court_id <= 8) {\r\n            mappedCourtId = reservation.court_id - 4; // Map 5–8 to 1–4\r\n          } else if (reservation.court_id >= 9 && reservation.court_id <= 12) {\r\n            mappedCourtId = reservation.court_id - 8; // Map 9–12 to 1–4\r\n          }\r\n\r\n          // Find the corresponding court column\r\n          const courtColumn = document.querySelector(\r\n            `.display-reservations-collumn:nth-child(${mappedCourtId})`\r\n          );\r\n\r\n          if (courtColumn) {\r\n            // Loop through all time slots in the court column\r\n            const courtTimeSlots = courtColumn.querySelectorAll(\r\n              \".display-reservations-time\"\r\n            );\r\n            courtTimeSlots.forEach((slot) => {\r\n              const slotTime = slot.id; // Use the text content of the time slot (e.g., \"6:30 - 7:00\")\r\n\r\n              // Split the time into start and end times\r\n              const [slotStart, slotEnd] = slotTime.split(\" - \");\r\n\r\n              if (\r\n                (slotStart >= reservation.start_time &&\r\n                  slotStart < reservation.end_time) || // Slot starts within the reservation\r\n                (slotEnd > reservation.start_time &&\r\n                  slotEnd <= reservation.end_time) // Slot ends within the reservation\r\n              ) {\r\n                console.log(`Highlighting slot: ${slotTime} for court_id: ${mappedCourtId}`);\r\n                // Highlight in light green if the reservation belongs to the current user, otherwise in red\r\n                const currentUserId = parseInt(\r\n                  localStorage.getItem(\"user_id\")\r\n                );\r\n                slot.style.backgroundColor =\r\n                  reservation.user_id === currentUserId\r\n                    ? \"#90EE90\"\r\n                    : \"red\";\r\n              }\r\n            });\r\n          } else {\r\n            console.error(\r\n              `Court column not found for mapped court_id: ${mappedCourtId}`\r\n            );\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      console.error(\"Failed to fetch reservations:\", await response.text());\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching reservations:\", error);\r\n  }\r\n}\r\n\r\n// Function to fetch and display all reservations in the upcoming reservations display\r\nasync function loadUpcomingReservations() {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/reservations\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const reservations = await response.json();\r\n      console.log(\"Fetched Reservations:\", reservations);\r\n\r\n      // Add each reservation to the upcoming reservations display\r\n      reservations.forEach((reservation) => {\r\n        addUpcomingReservation({\r\n          reservation_id: reservation.reservation_id,\r\n          court: reservation.court_id,\r\n          date: reservation.date,\r\n          time: `${reservation.start_time} - ${reservation.end_time}`,\r\n          gameType: reservation.game_type.charAt(0).toUpperCase() + reservation.game_type.slice(1), // Capitalize game type\r\n          players: reservation.players || \"N/A\", // Replace with actual player names if available\r\n        });\r\n      });\r\n    } else {\r\n      console.error(\"Failed to fetch reservations:\", await response.text());\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching reservations:\", error);\r\n  }\r\n}\r\n\r\n// Function to add a new reservation to the upcoming reservations display\r\nfunction addUpcomingReservation({ court, date, time, gameType, players, reservation_id }) {\r\n  const upcomingReservationsContainer = document.querySelector(\".display-upcoming-reservations\");\r\n\r\n  const reservationElement = document.createElement(\"div\");\r\n  reservationElement.className = \"upcoming-reservation\";\r\n\r\n  reservationElement.innerHTML = `\r\n    <div class=\"upcoming-reservation-table\">\r\n      <div class=\"upcoming-reservation-court\">Court : ${court}</div>\r\n      <div class=\"upcoming-reservation-date\">Date : ${date}</div>\r\n      <div class=\"upcoming-reservation-time\">Time : ${time}</div>\r\n      <div class=\"upcoming-reservation-game-type\">Type : ${gameType}</div>\r\n      <div class=\"upcoming-reservation-players\">Players : ${players}</div>\r\n    </div>\r\n    <div class=\"upcoming-reservation-table-2\">\r\n      <button class=\"cancel-reservation-button\" data-reservation-id=\"${reservation_id}\">Cancel</button>\r\n    </div>\r\n  `;\r\n\r\n  // Add listener to cancel button\r\n  const cancelButton = reservationElement.querySelector(\".cancel-reservation-button\");\r\n  cancelButton.addEventListener(\"click\", async () => {\r\n    const confirmed = confirm(\"Are you sure you want to cancel this reservation?\");\r\n    if (!confirmed) return;\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/delete-reservation\", {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ reservation_id })\r\n      });\r\n\r\n      const result = await res.json();\r\n      if (res.ok) {\r\n        alert(\"Reservation canceled!\");\r\n        refreshUpcomingReservationsDisplay();\r\n        highlightReservationsForSelectedDate(1, 4);\r\n        loadGuestCount();\r\n      } else {\r\n        alert(\"Failed to cancel: \" + result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error canceling:\", error);\r\n      alert(\"Error occurred while canceling reservation.\");\r\n    }\r\n  });\r\n\r\n  upcomingReservationsContainer.appendChild(reservationElement);\r\n}\r\n\r\n// Function to send email from backend\r\nasync function sendEmailFromBackend(email, subject, body) {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/send-email\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, subject, body }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      console.log(\"Email sent successfully\");\r\n    } else {\r\n      console.error(\"Failed to send email:\", await response.text());\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error sending email:\", error);\r\n  }\r\n}\r\n\r\n// Function to send a sample email\r\nasync function sendSampleEmail() {\r\n  const email = \"moddedsnipping3@gmail.com\";\r\n  const subject = \"Welcome to the Reservation System!\";\r\n  const body = \"This is a test email sent from the Reservation System on startup.\";\r\n\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/send-email\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, subject, body }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      console.log(\"Sample email sent successfully to\", email);\r\n    } else {\r\n      console.error(\"Failed to send sample email:\", await response.text());\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error sending sample email:\", error);\r\n  }\r\n}\r\n\r\n// Call the function on startup\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  sendSampleEmail(); // Send the sample email on startup\r\n  loadUpcomingReservations(); // Load upcoming reservations on startup\r\n  loadGuestCount(); // Load guest count on startup\r\n  logAllReservations(); // Log all reservations on startup\r\n  populateTimeOptions(\"start-time\"); // Populate the start time select\r\n  populateTimeOptions(\"end-time\");   // Populate the end time select (initially)\r\n  highlightReservationsForSelectedDate(1, 4); // Highlight reservations for the default date and court range\r\n\r\n  // Add event listener to update end-time options when start-time changes\r\n  document.getElementById(\"start-time\").addEventListener(\"change\", updateEndTimeOptions);\r\n\r\n  // Add event listener to update start-time options when court changes\r\n  document.getElementById(\"court\").addEventListener(\"change\", () => {\r\n    populateTimeOptions(\"start-time\"); // Update the start-time options based on the selected court\r\n  });\r\n});\r\n\r\n// Call the function when the date is selected\r\ndocument.getElementById(\"date\").addEventListener(\"change\", () => {\r\n  populateTimeOptions(\"start-time\"); // Update the start-time options based on the selected date\r\n  highlightReservationsForSelectedDate(1, 4);\r\n});\r\n\r\n// Call the function when the submit button is clicked\r\ndocument.getElementById(\"submit-reservation\").addEventListener(\"click\", async function (event) {\r\n  event.preventDefault(); // Prevent the form from submitting\r\n\r\n  try {\r\n    // Get the user ID from localStorage\r\n    const userId = localStorage.getItem(\"user_id\");\r\n    if (!userId) {\r\n      alert(\"User not logged in. Please log in first.\");\r\n      return;\r\n    }\r\n\r\n    loadGuestCount(); // Load guest count on startup\r\n\r\n    // Get the selected date\r\n    const date = document.getElementById(\"date\").value;\r\n    if (!date) {\r\n      alert(\"Please select a date.\");\r\n      return;\r\n    }\r\n\r\n    // Fetch the user's existing reservations for the selected date\r\n    let userReservations = [];\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/reservations?user_id=${userId}&date=${date}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        userReservations = await response.json();\r\n        console.log(`User's reservations for ${date}:`, userReservations);\r\n      } else {\r\n        alert(\"Failed to fetch user reservations. Please try again.\");\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching user reservations:\", error);\r\n      alert(\"An error occurred while fetching user reservations.\");\r\n      return;\r\n    }\r\n\r\n    // Check if the user already has 2 reservations on the same day\r\n    if (userReservations.length >= 2) {\r\n      alert(\"You cannot place more than 2 reservations on the same day.\");\r\n      return;\r\n    }\r\n\r\n    // Collect reservation data\r\n    const startTime = document.getElementById(\"start-time\").value;\r\n    const endTime = document.getElementById(\"end-time\").value;\r\n    const gameType = document.getElementById(\"game-type\").value;\r\n    const court = document.getElementById(\"court\").value;\r\n\r\n    if (!startTime || !endTime || !gameType || !court) {\r\n      alert(\"Please fill in all required fields.\");\r\n      return;\r\n    }\r\n\r\n    // Collect player entries and emails\r\n    const playerEntries = [];\r\n    const emails = []; // Array to store emails\r\n    document.querySelectorAll(\".player-entry\").forEach((entry) => {\r\n      const isGuest = entry.querySelector(\"input[type='checkbox']\").checked;\r\n\r\n      let playerName = null;\r\n      let email = null;\r\n      if (isGuest) {\r\n        // Get the guest name and email\r\n        const textInput = entry.querySelector(\"input[type='text']\");\r\n        const emailInput = entry.querySelector(\".email-input\");\r\n        if (textInput) {\r\n          playerName = textInput.value.trim();\r\n        }\r\n        if (emailInput) {\r\n          email = emailInput.value.trim();\r\n        }\r\n      } else {\r\n        // Get the member name and email from the connected user account\r\n        const selectInput = entry.querySelector(\"input[type='hidden']\");\r\n        if (selectInput) {\r\n          playerName = selectInput.dataset.name;\r\n          email = selectInput.dataset.email; // Assume the email is stored in a data attribute\r\n        }\r\n      }\r\n\r\n      if (playerName) {\r\n        playerEntries.push({\r\n          player_name: playerName,\r\n          is_guest: isGuest,\r\n          email: email,\r\n        });\r\n\r\n        if (email) {\r\n          emails.push(email); // Add the email to the emails array\r\n        }\r\n      }\r\n    });\r\n\r\n    // Save emails to a constant\r\n    const allEmails = emails;\r\n    console.log(\"Collected Emails:\", allEmails);\r\n\r\n    // Count the number of guest checkboxes that are checked\r\n    const guestCheckboxes = document.querySelectorAll(\".player-entry input[type='checkbox']:checked\");\r\n    const guestCountUsed = guestCheckboxes.length; // Calculate the guest count used\r\n\r\n    // Prepare the reservation data\r\n    const reservationData = {\r\n      user_id: parseInt(userId),\r\n      court_id: parseInt(court),\r\n      date,\r\n      start_time: startTime,\r\n      end_time: endTime,\r\n      game_type: gameType.toLowerCase(),\r\nguest_count_used: guestCountUsed, // Set the guest count used here\r\n      players: playerEntries, // Include player entries\r\n    };\r\n\r\n    // Send the reservation data to the backend\r\n    const response = await fetch(\"http://localhost:5000/api/reservations\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(reservationData),\r\n    });\r\n\r\n    if (response.ok) {\r\n      alert(\"Reservation successfully created!\");\r\n      refreshUpcomingReservationsDisplay();\r\n      highlightReservationsForSelectedDate(1, 4); // Refresh the reservation display\r\n\r\n\r\n      // Send emails with reservation details\r\n      const emailResponse = await fetch(\"http://localhost:5000/api/send-reservation-emails\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          emails: allEmails,\r\n          reservation_details: {\r\n            user_id: userId, // Include user_id for backend to fetch the user's email\r\n            date,\r\n            start_time: startTime,\r\n            end_time: endTime,\r\n            court: court,\r\n            game_type: gameType,\r\n          },\r\n        }),\r\n      });\r\nconsole.log(\"Sending reservation emails:\", allEmails);\r\n      if (emailResponse.ok) {\r\n        console.log(\"Reservation emails sent successfully\");\r\n      } else {\r\n        console.error(\"Failed to send reservation emails:\", await emailResponse.text());\r\n      }\r\n    } else {\r\n      const result = await response.json();\r\n      alert(\"Failed to create reservation: \" + result.error);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error creating reservation:\", error);\r\n    alert(\"An error occurred while creating the reservation.\");\r\n  }\r\n});\r\n\r\ndocument.querySelectorAll(\".player-entry input[type='checkbox']\").forEach((checkbox, index) => {\r\n  checkbox.addEventListener(\"change\", async function () {\r\n    const playerEntry = this.closest(\".player-entry\"); // Get the parent `.player-entry` div\r\n    const playerInputContainer = playerEntry.querySelector(\".player-input-container\"); // Container for the input/select\r\n\r\n    // Check if the checkbox is checked\r\n    if (this.checked) {\r\n      // Change to a text input for guest names\r\n      playerInputContainer.innerHTML = `\r\n        <input type=\"text\" placeholder=\"Enter Guest Name\" class=\"player-input\" />\r\n      `;\r\n\r\n      // Add an email input for guests\r\n      if (!playerEntry.querySelector(\".email-input\")) {\r\n        const emailInput = document.createElement(\"input\");\r\n        emailInput.type = \"email\";\r\n        emailInput.placeholder = \"Enter Email for Guest\";\r\n        emailInput.className = \"email-input\";\r\n        emailInput.style.marginTop = \"10px\"; // Add some spacing\r\n        emailInput.required = true; // Make it required\r\n        playerEntry.appendChild(emailInput);\r\n      }\r\n    } else {\r\n      // Change to a dropdown for member selection\r\n      playerInputContainer.innerHTML = `\r\n        <select class=\"player-select\">\r\n          <option value=\"\" disabled selected>Select a Member</option>\r\n        </select>\r\n      `;\r\n\r\n      // Remove the email input if it exists\r\n      const emailInput = playerEntry.querySelector(\".email-input\");\r\n      if (emailInput) {\r\n        playerEntry.removeChild(emailInput);\r\n      }\r\n\r\n      // Fetch the list of members and populate the dropdown\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/api/members\");\r\n        if (response.ok) {\r\n          const members = await response.json();\r\n          const playerSelect = playerInputContainer.querySelector(\".player-select\");\r\n\r\n          members.forEach((member) => {\r\n            const option = document.createElement(\"option\");\r\n            option.value = `${member.first_name} ${member.last_name}`;\r\n            option.textContent = `${member.first_name} ${member.last_name}`;\r\n            playerSelect.appendChild(option);\r\n          });\r\n        } else {\r\n          console.error(\"Failed to fetch members:\", await response.text());\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching members:\", error);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\ndocument.getElementById(\"court\").addEventListener(\"change\", function () {\r\n  const selectedCourt = parseInt(this.value); // Get the selected court number\r\n  const displayReservationsBox = document.querySelector(\".display-reservations-box\");\r\n\r\n  // Determine the range of courts to display\r\n  let courtRangeStart, courtRangeEnd;\r\n  if (selectedCourt >= 1 && selectedCourt <= 4) {\r\n    courtRangeStart = 1;\r\n    courtRangeEnd = 4;\r\n    console.log(\"Displaying reservations for courts 1–4.\");\r\n    highlightReservationsForSelectedDate(courtRangeStart, courtRangeEnd);\r\n  } else if (selectedCourt >= 5 && selectedCourt <= 8) {\r\n    courtRangeStart = 5;\r\n    courtRangeEnd = 8;\r\n    console.log(\"Displaying reservations for courts 5–8.\");\r\n    highlightReservationsForSelectedDate(courtRangeStart, courtRangeEnd);\r\n  } else if (selectedCourt >= 9 && selectedCourt <= 12) {\r\n    courtRangeStart = 9;\r\n    courtRangeEnd = 12;\r\n    console.log(\"Displaying reservations for courts 9–12.\");\r\n    highlightReservationsForSelectedDate(courtRangeStart, courtRangeEnd);\r\n  }\r\n\r\n  // Clear the background styling of all time slots\r\n  const timeSlots = displayReservationsBox.querySelectorAll(\".display-reservations-time\");\r\n  timeSlots.forEach((slot) => {\r\n    slot.style.backgroundColor = \"\"; // Reset background color\r\n  });\r\n\r\n  // Update court titles dynamically\r\n  const courtColumns = displayReservationsBox.querySelectorAll(\".display-reservations-collumn\");\r\n  courtColumns.forEach((courtColumn, index) => {\r\n    const courtTitle = courtColumn.querySelector(\".court-title\");\r\n\r\n    // Map courts 1–4, 5–8, and 9–12 to their respective titles\r\n    if (selectedCourt <= 4) {\r\n      courtTitle.textContent = `Court ${index + 1}`;\r\n    } else if (selectedCourt >= 5 && selectedCourt <= 8) {\r\n      courtTitle.textContent = `Court ${index + 5}`;\r\n    } else if (selectedCourt >= 9 && selectedCourt <= 12) {\r\n      courtTitle.textContent = `Court ${index + 9}`;\r\n    }\r\n  });\r\n});\r\n\r\ndocument.getElementById(\"game-type\").addEventListener(\"change\", function () {\r\n  const gameType = this.value.toLowerCase(); // Get the selected game type\r\n  const playerEntries = document.querySelectorAll(\".player-entry\"); // Select all player entry fields\r\n\r\n  if (gameType === \"singles\") {\r\n    // Add a class to hide all but the first player entry\r\n    playerEntries.forEach((entry, index) => {\r\n      if (index === 0) {\r\n        entry.classList.remove(\"hidden\"); // Show the first player entry\r\n      } else {\r\n        entry.classList.add(\"hidden\"); // Hide all other player entries\r\n        const checkbox = entry.querySelector(\"input[type='checkbox']\");\r\n        const emailInput = entry.querySelector(\".email-input\");\r\n\r\n        // Uncheck the checkbox and remove the email input if it exists\r\n        if (checkbox) checkbox.checked = false;\r\n        if (emailInput) entry.removeChild(emailInput);\r\n      }\r\n    });\r\n  } else if (gameType === \"doubles\") {\r\n    // Remove the hidden class from all player entries\r\n    playerEntries.forEach((entry) => {\r\n      entry.classList.remove(\"hidden\"); // Show all player entries\r\n    });\r\n  }\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n  // Fetch members on startup\r\n  let members = [];\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/members\");\r\n    if (response.ok) {\r\n      members = await response.json();\r\n    } else {\r\n      console.error(\"Failed to fetch members:\", await response.text());\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching members:\", error);\r\n  }\r\n\r\n  // Populate the dropdowns with members\r\n  document.querySelectorAll(\".player-select\").forEach((select) => {\r\n    select.innerHTML = `<option value=\"\" disabled selected>Select a Member</option>`;\r\n    members.forEach((member) => {\r\n      const option = document.createElement(\"option\");\r\n      option.value = `${member.first_name} ${member.last_name}`;\r\n      option.textContent = `${member.first_name} ${member.last_name}`;\r\n      select.appendChild(option);\r\n    });\r\n  });\r\n\r\n  // Add event listeners to checkboxes for dynamic input switching\r\n  document.querySelectorAll(\".player-entry input[type='checkbox']\").forEach((checkbox) => {\r\n    checkbox.addEventListener(\"change\", function () {\r\n      const playerEntry = this.closest(\".player-entry\");\r\n      const playerInputContainer = playerEntry.querySelector(\".player-input-container\");\r\n\r\n      if (this.checked) {\r\n        // Switch to text input for guest names\r\n        playerInputContainer.innerHTML = `\r\n          <input type=\"text\" placeholder=\"Enter Guest Name\" class=\"player-input\" />\r\n        `;\r\n\r\n        // Add an email input for guests\r\n        if (!playerEntry.querySelector(\".email-input\")) {\r\n          const emailInput = document.createElement(\"input\");\r\n          emailInput.type = \"email\";\r\n          emailInput.placeholder = \"Enter Email for Guest\";\r\n          emailInput.className = \"email-input\";\r\n          emailInput.style.marginTop = \"10px\"; // Add some spacing\r\n          emailInput.required = true; // Make it required\r\n          playerEntry.appendChild(emailInput);\r\n        }\r\n      } else {\r\n        // Switch back to dropdown for member selection\r\n        playerInputContainer.innerHTML = `\r\n          <select class=\"player-select\">\r\n            <option value=\"\" disabled selected>Select a Member</option>\r\n          </select>\r\n        `;\r\n\r\n        // Populate the dropdown with members again\r\n        const playerSelect = playerInputContainer.querySelector(\".player-select\");\r\n        members.forEach((member) => {\r\n          const option = document.createElement(\"option\");\r\n          option.value = `${member.first_name} ${member.last_name}`;\r\n          option.textContent = `${member.first_name} ${member.last_name}`;\r\n          playerSelect.appendChild(option);\r\n        });\r\n\r\n        // Remove the email input if it exists\r\n        const emailInput = playerEntry.querySelector(\".email-input\");\r\n        if (emailInput) {\r\n          playerEntry.removeChild(emailInput);\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n"],"names":["async","loadGuestCount","response","guestCount","userId","localStorage","getItem","await","fetch","method","headers","Content-Type","ok","json","guest_count","console","log","document","querySelector","textContent","error","text","refreshUpcomingReservationsDisplay","innerHTML","loadUpcomingReservations","populateTimeOptions","selectElementId","selectElement","getElementById","placeholderOption","createElement","value","disabled","selected","appendChild","date","reservations","addEventListener","selectedDate","this","let","hour","minutes","time","toString","padStart","option","isAvailable","some","reservation","reservationStart","start_time","reservationEnd","end_time","parseTimeToMinutes","period","displayTime","split","map","Number","updateEndTimeOptions","startTimeSelect","endTimeSelect","selectedStartTime","startHour","startMinutes","isOneAndHalfHoursBeforeReserved","forEach","reservationStartMinutes","selectedStartMinutes","timeDifference","oneAndHalfHoursLater","endTime","endTimes","push","Math","floor","twoHoursLater","logAllReservations","highlightReservationsForSelectedDate","courtRangeStart","courtRangeEnd","querySelectorAll","slot","style","backgroundColor","court_id","mappedCourtId","courtColumn","slotTime","id","slotStart","slotEnd","currentUserId","parseInt","user_id","addUpcomingReservation","reservation_id","court","gameType","game_type","charAt","toUpperCase","slice","players","upcomingReservationsContainer","reservationElement","className","confirm","res","body","JSON","stringify","result","alert","sendEmailFromBackend","email","subject","sendSampleEmail","event","preventDefault","userReservations","length","startTime","playerEntries","emails","emailInput","selectInput","isGuest","entry","checked","playerName","textInput","trim","dataset","name","player_name","is_guest","emailResponse","allEmails","guestCheckboxes","guestCountUsed","reservationData","toLowerCase","guest_count_used","reservation_details","checkbox","index","playerEntry","closest","playerInputContainer","type","placeholder","marginTop","required","removeChild","members","playerSelect","member","first_name","last_name","selectedCourt","displayReservationsBox","courtTitle","classList","remove","add","select"],"mappings":"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"}